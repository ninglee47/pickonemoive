{"ast":null,"code":"var _jsxFileName = \"/Users/ning/Personal/React_learn/pickonemovie/src/Stream.js\";\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; //const apiKey = 'nPkwzsC8PrwHhxzzZvhOFt6OU4rGNVuTFq1UQ7nS' dr\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = 'hZwUqU4GPUbgMFlwhFn1ZNfFZE18RExQzlS1okuu';\n\nasync function getStreamData(movie_id) {\n  let streams = await fetch(`https://secure-hamlet-28039.herokuapp.com/https://api.watchmode.com/v1/title/${movie_id}/sources/?apiKey=${apiKey}&regions=GB`).then(res => res.json()); //console.log(streams)\n\n  return streams;\n}\n\nfunction GenreList(props) {\n  let genres;\n  genres = props.data.map((d, index) =>\n  /*#__PURE__*/\n  //console.log(genre.name)\n  _jsxDEV(\"li\", {\n    children: /*#__PURE__*/_jsxDEV(\"a\", {\n      href: d.web_url,\n      target: \"_blank\",\n      rel: \"noreferrer\",\n      children: d.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 17\n    }, this)\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 13\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: genres\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n\n_c = GenreList;\n\nclass Stream extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stream: []\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    var id = this.props.value.id;\n\n    if (id !== prevProps.value.id) {\n      getStreamData(id).then(data => this.setState({\n        stream: data\n      })).then(() => {\n        var arrayOne = this.props.data;\n        var arrayTwo = this.state.stream;\n        const results = arrayOne.filter(({\n          id: id1\n        }) => arrayTwo.some(({\n          source_id: id2\n        }) => id2 === id1)); //console.log(results)\n        //Add stream service name\n\n        for (let index = 0; index < arrayTwo.length; index++) {\n          const element = arrayTwo[index];\n\n          for (let index = 0; index < results.length; index++) {\n            const id = results[index].id;\n\n            if (element.source_id === id) {\n              element.name = results[index].name;\n            }\n          }\n        } //filter duplicate data\n\n\n        arrayTwo = arrayTwo.filter((thing, index, self) => index === self.findIndex(t => t.source_id === thing.source_id && t.web_url === thing.web_url));\n        this.setState({\n          stream: arrayTwo\n        });\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"detail\",\n      children: [\"Avaialbe on:\", /*#__PURE__*/_jsxDEV(GenreList, {\n        data: this.state.stream\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Stream;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenreList\");","map":{"version":3,"sources":["/Users/ning/Personal/React_learn/pickonemovie/src/Stream.js"],"names":["React","apiKey","getStreamData","movie_id","streams","fetch","then","res","json","GenreList","props","genres","data","map","d","index","web_url","name","Stream","Component","constructor","state","stream","componentDidUpdate","prevProps","id","value","setState","arrayOne","arrayTwo","results","filter","id1","some","source_id","id2","length","element","thing","self","findIndex","t","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n//const apiKey = 'nPkwzsC8PrwHhxzzZvhOFt6OU4rGNVuTFq1UQ7nS' dr\nconst apiKey = 'hZwUqU4GPUbgMFlwhFn1ZNfFZE18RExQzlS1okuu'\n\nasync function getStreamData (movie_id) {\n    let streams = await fetch(`https://secure-hamlet-28039.herokuapp.com/https://api.watchmode.com/v1/title/${movie_id}/sources/?apiKey=${apiKey}&regions=GB`)\n    .then(res => res.json())\n\n    //console.log(streams)\n\n    return streams\n}\n\nfunction GenreList(props) {\n    let genres\n    \n        genres = props.data.map((d, index)=> \n            //console.log(genre.name)\n            <li key={index}>\n                <a href={d.web_url} target='_blank' rel=\"noreferrer\" >{d.name}</a>\n            </li>\n        )   \n    \n    return (\n        <div>\n            <ul>{genres }</ul>\n        </div>\n    )\n}\n\nclass Stream extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state ={\n            stream: []\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        var id = this.props.value.id\n        if (id !== prevProps.value.id) {\n            getStreamData(id)\n            .then(data => this.setState({\n                stream: data\n                })\n            ).then(()=> {\n                var arrayOne =  this.props.data;\n                var arrayTwo = this.state.stream;\n                \n                const results = arrayOne.filter(({ id: id1 }) => arrayTwo.some(({ source_id: id2 }) => id2 === id1));\n\n                //console.log(results)\n                //Add stream service name\n                for (let index = 0; index < arrayTwo.length; index++) {\n                    const element = arrayTwo[index];\n                    for (let index = 0; index < results.length; index++) {\n                        const id = results[index].id;\n                        if (element.source_id === id) {\n                            element.name = results[index].name\n                        }    \n                    }   \n                }\n                \n                //filter duplicate data\n                arrayTwo = arrayTwo.filter((thing, index, self) =>\n                    index === self.findIndex((t) => (\n                      t.source_id === thing.source_id && t.web_url === thing.web_url\n                    ))\n                )\n\n                this.setState({\n                    stream: arrayTwo\n                })\n            })\n        }\n    }\n\n    render () {\n        return (\n            <div className='detail'>\n                Avaialbe on:\n                <GenreList  data={this.state.stream}/>\n            </div>\n        )\n    }\n}\n\nexport default Stream;"]},"metadata":{},"sourceType":"module"}