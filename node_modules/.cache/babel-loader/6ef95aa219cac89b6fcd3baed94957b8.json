{"ast":null,"code":"var _jsxFileName = \"/Users/ning/Personal/React_learn/pick-one/src/Stream.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = 'nPkwzsC8PrwHhxzzZvhOFt6OU4rGNVuTFq1UQ7nS';\nlet baseUrl = 'https://api.watchmode.com/v1/search/?apiKey={apiKey}&search_value=Ed%20Wood';\n\nasync function getStreamData(movie_id, func) {\n  let api_id = await fetch(`https://api.watchmode.com/v1/search/?apiKey=${apiKey}&search_field=imdb_id&search_value=${movie_id}`).then(res => res.json());\n  console.log(api_id.title_results[0].id);\n  var search_id = api_id.title_results[0].id;\n  console.log(search_id); //let streams = await fetch(`https://api.watchmode.com/v1/title/${search_id}/sources/?apiKey=${apiKey}`)\n  //.then(res => res.json())\n\n  let streams = await fetch(`https://api.watchmode.com/v1/title/${search_id}/sources/?apiKey=${apiKey}`).then(res => res.json());\n\n  if (streams.length == 0) {\n    func();\n  }\n\n  console.log(streams);\n}\n\nclass Stream extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      streamid: \"\"\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    //console.log(this.props.value.imdb_id)\n    var id = this.props.value.imdb_id;\n\n    if (id !== prevProps.value.imdb_id) {\n      getStreamData(id, this.props.reRoll);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Avaialbe on:\", this.state.stream]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Stream;","map":{"version":3,"sources":["/Users/ning/Personal/React_learn/pick-one/src/Stream.js"],"names":["React","apiKey","baseUrl","getStreamData","movie_id","func","api_id","fetch","then","res","json","console","log","title_results","id","search_id","streams","length","Stream","Component","constructor","props","state","streamid","componentDidUpdate","prevProps","value","imdb_id","reRoll","render","stream"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,MAAM,GAAG,0CAAf;AACA,IAAIC,OAAO,GAAG,6EAAd;;AAGA,eAAeC,aAAf,CAA8BC,QAA9B,EAAwCC,IAAxC,EAA8C;AAC1C,MAAIC,MAAM,GAAG,MAAMC,KAAK,CAAE,+CAA8CN,MAAO,sCAAqCG,QAAS,EAArG,CAAL,CAClBI,IADkB,CACbC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADM,CAAnB;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACO,aAAP,CAAqB,CAArB,EAAwBC,EAApC;AACA,MAAIC,SAAS,GAAGT,MAAM,CAACO,aAAP,CAAqB,CAArB,EAAwBC,EAAxC;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAYG,SAAZ,EAN0C,CAQ1C;AACA;;AAEA,MAAIC,OAAO,GAAG,MAAMT,KAAK,CAAE,sCAAqCQ,SAAU,oBAAmBd,MAAO,EAA3E,CAAL,CACnBO,IADmB,CACdC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADO,CAApB;;AAGA,MAAIM,OAAO,CAACC,MAAR,IAAkB,CAAtB,EAAyB;AACrBZ,IAAAA,IAAI;AACP;;AAEDM,EAAAA,OAAO,CAACC,GAAR,CAAYI,OAAZ;AACH;;AAED,MAAME,MAAN,SAAqBlB,KAAK,CAACmB,SAA3B,CAAqC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAY;AACRC,MAAAA,QAAQ,EAAE;AADF,KAAZ;AAGH;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC1B;AACA,QAAIX,EAAE,GAAG,KAAKO,KAAL,CAAWK,KAAX,CAAiBC,OAA1B;;AACA,QAAIb,EAAE,KAAKW,SAAS,CAACC,KAAV,CAAgBC,OAA3B,EAAoC;AAChCxB,MAAAA,aAAa,CAACW,EAAD,EAAK,KAAKO,KAAL,CAAWO,MAAhB,CAAb;AACH;AACJ;;AAEDC,EAAAA,MAAM,GAAI;AACN,wBACI;AAAA,iCAEK,KAAKP,KAAL,CAAWQ,MAFhB;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AAvBgC;;AA0BrC,eAAeZ,MAAf","sourcesContent":["import React from 'react';\n\nconst apiKey = 'nPkwzsC8PrwHhxzzZvhOFt6OU4rGNVuTFq1UQ7nS'\nlet baseUrl = 'https://api.watchmode.com/v1/search/?apiKey={apiKey}&search_value=Ed%20Wood'\n\n\nasync function getStreamData (movie_id, func) {\n    let api_id = await fetch(`https://api.watchmode.com/v1/search/?apiKey=${apiKey}&search_field=imdb_id&search_value=${movie_id}`)\n    .then(res => res.json())\n    \n    console.log(api_id.title_results[0].id)\n    var search_id = api_id.title_results[0].id\n    console.log(search_id)\n\n    //let streams = await fetch(`https://api.watchmode.com/v1/title/${search_id}/sources/?apiKey=${apiKey}`)\n    //.then(res => res.json())\n\n    let streams = await fetch(`https://api.watchmode.com/v1/title/${search_id}/sources/?apiKey=${apiKey}`)\n    .then(res => res.json())\n\n    if (streams.length == 0) {\n        func()\n    }\n\n    console.log(streams)\n}\n\nclass Stream extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state ={\n            streamid: \"\"\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        //console.log(this.props.value.imdb_id)\n        var id = this.props.value.imdb_id\n        if (id !== prevProps.value.imdb_id) {\n            getStreamData(id, this.props.reRoll)\n        }\n    }\n\n    render () {\n        return (\n            <div>\n                Avaialbe on:\n                {this.state.stream}\n            </div>\n        )\n    }\n}\n\nexport default Stream;"]},"metadata":{},"sourceType":"module"}